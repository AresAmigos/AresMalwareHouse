const audio = new Audio("music/audio.mp3"); // Imposta l'audio predefinito
const playPauseBtn = document.getElementById("play-pause-btn");
const currentTime = document.getElementById("current-time");
const totalTime = document.getElementById("total-time");
const muteBtn = document.getElementById("mute-btn");
const volumeSlider = document.getElementById("volume-slider");
const seekBar = document.getElementById("seek-bar");
const cose = document.getElementById("cosa-faccio");

let isPlaying = false;
let isChangingSeekBar = false;

const songList = document.getElementById('song-list');
const changeSongBtn = document.getElementById('change-song-btn');
const audioTitle = document.getElementById('cosa-faccio');
const audioLink = document.querySelector('.audio-title a');

// Mostra/nascondi la lista delle canzoni al click sul pulsante
changeSongBtn.addEventListener('click', function() {
    songList.style.display = songList.style.display === 'none' ? 'block' : 'none';
});

// Aggiungi un gestore di eventi per l'elemento <a> nella lista delle canzoni
songList.addEventListener('click', function(event) {
    if (event.target.tagName === 'A') {
        event.preventDefault(); // Previeni il comportamento predefinito del link
        if (isPlaying) {
            audio.pause(); // Ferma la canzone in riproduzione, se presente
            playPauseBtn.textContent = "\u25B6"; // Cambia l'icona del pulsante in play
            isPlaying = false;
            seekBar.min = 0;
            seekBar.value = 0;
        }
        songList.style.display = 'none';
        const audioUrl = event.target.getAttribute('href'); // Ottieni l'URL dell'audio dalla proprietÃ  href del link
        audio.src = audioUrl; // Imposta l'URL dell'audio da riprodurre
        audioLink.href = audioUrl; // Imposta l'URL del link della canzone
        audioLink.textContent = event.target.textContent.trim(); // Imposta il testo del link con il nome del brano selezionato
        cose.textContent = "Brano: "; // Aggiorna il testo con il nome del brano
    }
});

playPauseBtn.addEventListener("click", () => {
    if (isPlaying) {
        audio.pause();
        playPauseBtn.textContent = "\u25B6";
        cose.textContent = "In pausa:";
    } else {
        audio.play();
        playPauseBtn.textContent = "\u23F8";
        cose.innerHTML = "Riproducendo:";
    }
    isPlaying = !isPlaying;
});

audio.addEventListener("timeupdate", () => {
    if (!isChangingSeekBar && isPlaying) {
        const progress = (audio.currentTime / audio.duration) * 500;
        seekBar.value = progress; // Aggiorna il valore della barra di avanzamento
    }
    const currentTimeFormatted = formatTime(audio.currentTime);
    currentTime.textContent = currentTimeFormatted;
});

audio.addEventListener("loadedmetadata", () => {
    totalTime.textContent = formatTime(audio.duration);
    //seekBar.max = audio.duration; // Set the maximum value of the seek bar to the duration of the audio
});

seekBar.addEventListener("input", () => {
    isChangingSeekBar = true;
    arrivato = (audio.duration * seekBar.value) / 500
    audio.currentTime = arrivato; // Set the current playback time to the value of the seek bar
});

seekBar.addEventListener("change", () => {
    isChangingSeekBar = false;
});


muteBtn.addEventListener("click", () => {
    audio.muted = !audio.muted;
    if (audio.muted) {
        muteBtn.textContent = "\uD83D\uDD07";
    } else {
        muteBtn.textContent = "\uD83D\uDD08";
    }
});

volumeSlider.addEventListener("input", () => {
    audio.volume = volumeSlider.value;
});

function formatTime(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins < 10 ? "0" : ""}${mins}:${secs < 10 ? "0" : ""}${secs}`;
}
